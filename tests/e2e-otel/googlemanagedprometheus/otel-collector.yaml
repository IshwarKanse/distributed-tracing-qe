apiVersion: v1
kind: ServiceAccount
metadata:
  name: chainsaw-gmpmetrics-sa
  namespace: chainsaw-gmpmetrics

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: chainsaw-gmpmetrics-role
  namespace: chainsaw-gmpmetrics
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces", "nodes"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: chainsaw-gmpmetrics-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: chainsaw-gmpmetrics-role
subjects:
- kind: ServiceAccount
  name: chainsaw-gmpmetrics-sa
  namespace: chainsaw-gmpmetrics

---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: gmp
spec:
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.119.0
  serviceAccount: chainsaw-gmpmetrics-sa
  volumes:
    - name: gcp-key-volume
      secret:
        secretName: gcp-secret
        items:
        - key: key.json
          path: key.json
  volumeMounts:
    - name: gcp-key-volume
      mountPath: /tmp/gcp/
      readOnly: true
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /tmp/gcp/key.json
    - name: GCLOUD_PROJECT
      valueFrom:
        secretKeyRef:
          name: gcp-secret
          key: project-id
  config:
    exporters:
      otlphttp:
        encoding: json
        endpoint: https://telemetry.googleapis.com
        # Use the googleclientauth extension
        auth:
          authenticator: googleclientauth # Use googleclientauth

    extensions:
      # Standard for the collector. Used for probes.
      health_check:
        endpoint: "0.0.0.0:13133"
      # This is an auth extension that adds Google Application Default Credentials to http and gRPC requests.
      googleclientauth: {}

    processors:
      # When sending metrics to the GCP OTLP endpoint, the gcp.project_id resource attribute is required to be set to your project ID.
      resource/gcp_project_id:
        attributes:
        - action: insert
          # MAKE SURE YOU REPLACE THIS WITH YOUR PROJECT ID
          value: ${env:GCLOUD_PROJECT}
          key: gcp.project_id
      # This filter is a standard part of handling the collector's self-observability metrics. Not related to OTLP ingestion.
      filter/self-metrics:
        metrics:
          include:
            match_type: strict
            metric_names:
            - otelcol_process_uptime
            - otelcol_process_memory_rss
            - otelcol_grpc_io_client_completed_rpcs
            - otelcol_googlecloudmonitoring_point_count
      # The recommended batch size for the OTLP endpoint is 200 metric data points.
      batch:
        send_batch_max_size: 200
        send_batch_size: 200
        timeout: 5s

      # The k8sattributes processor adds k8s resource attributes to metrics based on the source IP that sent the metrics to the collector.
      # k8s attributes are important for avoiding errors from timeseries "collisions".
      # These attributes help distinguish workloads from each other, and provide useful metadata (e.g. namespace) when querying.
      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      # Standard processor for gracefully degrading when overloaded to prevent OOM.
      memory_limiter:
        check_interval: 1s
        limit_percentage: 65
        spike_limit_percentage: 20

      # Standard processor for enriching self-observability metrics. Unrelated to OTLP ingestion.
      metricstransform/self-metrics:
        transforms:
        - action: update
          include: otelcol_process_uptime
          operations:
          - action: add_label
            new_label: version
            new_value: Google-Cloud-OTLP manifests:0.1.0 otel/opentelemetry-collector-contrib:0.118.0

      # The resourcedetection processor, similar to the k8sattributes processor, enriches metrics with important metadata.
      # The gcp detector provides the cluster name and cluster location.
      resourcedetection:
        detectors: [gcp]
        timeout: 10s

      # This transform processor avoids ingestion errors if metrics contain attributes with names that are reserved for the prometheus_target resource.
      transform/collision:
        metric_statements:
        - context: datapoint
          statements:
          - set(attributes["exported_location"], attributes["location"])
          - delete_key(attributes, "location")
          - set(attributes["exported_cluster"], attributes["cluster"])
          - delete_key(attributes, "cluster")
          - set(attributes["exported_namespace"], attributes["namespace"])
          - delete_key(attributes, "namespace")
          - set(attributes["exported_job"], attributes["job"])
          - delete_key(attributes, "job")
          - set(attributes["exported_instance"], attributes["instance"])
          - delete_key(attributes, "instance")
          - set(attributes["exported_project_id"], attributes["project_id"])
          - delete_key(attributes, "project_id")

    receivers:
      # This collector is configured to accept OTLP metrics, logs, and traces, and is designed to receive OTLP from workloads running in the cluster.
      otlp:
        protocols:
          grpc: {}
          http: {}
      # Push the collector's own self-observability metrics to the otlp receiver.
      prometheus/self-metrics:
        config:
          scrape_configs:
            - job_name: 'otel-collector'
              scrape_interval: 10s
              static_configs:
                - targets: [ '0.0.0.0:8888' ]

    service:
      extensions:
      - health_check
      - googleclientauth
      pipelines:
        # Recieve OTLP metrics, and export metrics to GMP using the otlphttp exporter.
        metrics/otlp:
          exporters:
          - otlphttp
          processors:
          - k8sattributes
          - memory_limiter
          - resource/gcp_project_id
          - resourcedetection
          - transform/collision
          - batch
          receivers:
          - otlp
        # Scrape self-observability Prometheus metrics, and export metrics to GMP using the otlphttp exporter.
        metrics/self-metrics:
          exporters:
          - otlphttp
          processors:
          - filter/self-metrics
          - metricstransform/self-metrics
          - k8sattributes
          - memory_limiter
          - resource/gcp_project_id
          - resourcedetection
          - batch
          receivers:
          - prometheus/self-metrics
      telemetry:
        metrics:
          address: :8888
          level: normal
